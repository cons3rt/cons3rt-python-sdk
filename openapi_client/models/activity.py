# coding: utf-8

"""
    CONS3RT Web API

    A CONS3RT ReSTful API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Activity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'registered_user_count': 'int',
        'registered_project_count': 'int',
        'registered_asset_count': 'int',
        'active_deployment_count': 'int',
        'active_test_count': 'int'
    }

    attribute_map = {
        'registered_user_count': 'registeredUserCount',
        'registered_project_count': 'registeredProjectCount',
        'registered_asset_count': 'registeredAssetCount',
        'active_deployment_count': 'activeDeploymentCount',
        'active_test_count': 'activeTestCount'
    }

    def __init__(self, registered_user_count=None, registered_project_count=None, registered_asset_count=None, active_deployment_count=None, active_test_count=None, local_vars_configuration=None):  # noqa: E501
        """Activity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._registered_user_count = None
        self._registered_project_count = None
        self._registered_asset_count = None
        self._active_deployment_count = None
        self._active_test_count = None
        self.discriminator = None

        if registered_user_count is not None:
            self.registered_user_count = registered_user_count
        if registered_project_count is not None:
            self.registered_project_count = registered_project_count
        if registered_asset_count is not None:
            self.registered_asset_count = registered_asset_count
        if active_deployment_count is not None:
            self.active_deployment_count = active_deployment_count
        if active_test_count is not None:
            self.active_test_count = active_test_count

    @property
    def registered_user_count(self):
        """Gets the registered_user_count of this Activity.  # noqa: E501


        :return: The registered_user_count of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._registered_user_count

    @registered_user_count.setter
    def registered_user_count(self, registered_user_count):
        """Sets the registered_user_count of this Activity.


        :param registered_user_count: The registered_user_count of this Activity.  # noqa: E501
        :type: int
        """

        self._registered_user_count = registered_user_count

    @property
    def registered_project_count(self):
        """Gets the registered_project_count of this Activity.  # noqa: E501


        :return: The registered_project_count of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._registered_project_count

    @registered_project_count.setter
    def registered_project_count(self, registered_project_count):
        """Sets the registered_project_count of this Activity.


        :param registered_project_count: The registered_project_count of this Activity.  # noqa: E501
        :type: int
        """

        self._registered_project_count = registered_project_count

    @property
    def registered_asset_count(self):
        """Gets the registered_asset_count of this Activity.  # noqa: E501


        :return: The registered_asset_count of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._registered_asset_count

    @registered_asset_count.setter
    def registered_asset_count(self, registered_asset_count):
        """Sets the registered_asset_count of this Activity.


        :param registered_asset_count: The registered_asset_count of this Activity.  # noqa: E501
        :type: int
        """

        self._registered_asset_count = registered_asset_count

    @property
    def active_deployment_count(self):
        """Gets the active_deployment_count of this Activity.  # noqa: E501


        :return: The active_deployment_count of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._active_deployment_count

    @active_deployment_count.setter
    def active_deployment_count(self, active_deployment_count):
        """Sets the active_deployment_count of this Activity.


        :param active_deployment_count: The active_deployment_count of this Activity.  # noqa: E501
        :type: int
        """

        self._active_deployment_count = active_deployment_count

    @property
    def active_test_count(self):
        """Gets the active_test_count of this Activity.  # noqa: E501


        :return: The active_test_count of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._active_test_count

    @active_test_count.setter
    def active_test_count(self, active_test_count):
        """Sets the active_test_count of this Activity.


        :param active_test_count: The active_test_count of this Activity.  # noqa: E501
        :type: int
        """

        self._active_test_count = active_test_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Activity):
            return True

        return self.to_dict() != other.to_dict()
