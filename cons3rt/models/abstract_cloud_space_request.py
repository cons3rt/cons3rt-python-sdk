# coding: utf-8

"""
    CONS3RT Web API

    A CONS3RT ReSTful API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cons3rt.configuration import Configuration


class AbstractCloudSpaceRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cloud_space_name': 'str',
        'maximum_virtual_machines': 'int',
        'accesss_point': 'str',
        'cidr': 'str',
        'maximum_num_cpus': 'int',
        'maximum_num_gpus': 'int',
        'maximum_ram_in_megabytes': 'int',
        'maximum_storage_in_megabytes': 'int',
        'num_availability_zones': 'int',
        'power_on_minimum_delay': 'int',
        'subtype': 'str'
    }

    attribute_map = {
        'cloud_space_name': 'cloudSpaceName',
        'maximum_virtual_machines': 'maximumVirtualMachines',
        'accesss_point': 'accesssPoint',
        'cidr': 'cidr',
        'maximum_num_cpus': 'maximumNumCpus',
        'maximum_num_gpus': 'maximumNumGpus',
        'maximum_ram_in_megabytes': 'maximumRamInMegabytes',
        'maximum_storage_in_megabytes': 'maximumStorageInMegabytes',
        'num_availability_zones': 'numAvailabilityZones',
        'power_on_minimum_delay': 'powerOnMinimumDelay',
        'subtype': 'subtype'
    }

    discriminator_value_class_map = {
        'OpenStackCloudSpaceRequest': 'OpenStackCloudSpaceRequest',
        'AwsCloudSpaceRequest': 'AwsCloudSpaceRequest',
        'AzureCloudSpaceRequest': 'AzureCloudSpaceRequest',
        'VCloudCloudSpaceRequest': 'VCloudCloudSpaceRequest'
    }

    def __init__(self, cloud_space_name=None, maximum_virtual_machines=None, accesss_point=None, cidr=None, maximum_num_cpus=None, maximum_num_gpus=None, maximum_ram_in_megabytes=None, maximum_storage_in_megabytes=None, num_availability_zones=None, power_on_minimum_delay=None, subtype=None, local_vars_configuration=None):  # noqa: E501
        """AbstractCloudSpaceRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cloud_space_name = None
        self._maximum_virtual_machines = None
        self._accesss_point = None
        self._cidr = None
        self._maximum_num_cpus = None
        self._maximum_num_gpus = None
        self._maximum_ram_in_megabytes = None
        self._maximum_storage_in_megabytes = None
        self._num_availability_zones = None
        self._power_on_minimum_delay = None
        self._subtype = None
        self.discriminator = 'subtype'

        self.cloud_space_name = cloud_space_name
        if maximum_virtual_machines is not None:
            self.maximum_virtual_machines = maximum_virtual_machines
        if accesss_point is not None:
            self.accesss_point = accesss_point
        self.cidr = cidr
        if maximum_num_cpus is not None:
            self.maximum_num_cpus = maximum_num_cpus
        if maximum_num_gpus is not None:
            self.maximum_num_gpus = maximum_num_gpus
        if maximum_ram_in_megabytes is not None:
            self.maximum_ram_in_megabytes = maximum_ram_in_megabytes
        if maximum_storage_in_megabytes is not None:
            self.maximum_storage_in_megabytes = maximum_storage_in_megabytes
        if num_availability_zones is not None:
            self.num_availability_zones = num_availability_zones
        if power_on_minimum_delay is not None:
            self.power_on_minimum_delay = power_on_minimum_delay
        self.subtype = subtype

    @property
    def cloud_space_name(self):
        """Gets the cloud_space_name of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The cloud_space_name of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._cloud_space_name

    @cloud_space_name.setter
    def cloud_space_name(self, cloud_space_name):
        """Sets the cloud_space_name of this AbstractCloudSpaceRequest.


        :param cloud_space_name: The cloud_space_name of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_space_name is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_space_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cloud_space_name is not None and len(cloud_space_name) > 25):
            raise ValueError("Invalid value for `cloud_space_name`, length must be less than or equal to `25`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cloud_space_name is not None and len(cloud_space_name) < 1):
            raise ValueError("Invalid value for `cloud_space_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._cloud_space_name = cloud_space_name

    @property
    def maximum_virtual_machines(self):
        """Gets the maximum_virtual_machines of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The maximum_virtual_machines of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: int
        """
        return self._maximum_virtual_machines

    @maximum_virtual_machines.setter
    def maximum_virtual_machines(self, maximum_virtual_machines):
        """Sets the maximum_virtual_machines of this AbstractCloudSpaceRequest.


        :param maximum_virtual_machines: The maximum_virtual_machines of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: int
        """

        self._maximum_virtual_machines = maximum_virtual_machines

    @property
    def accesss_point(self):
        """Gets the accesss_point of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The accesss_point of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._accesss_point

    @accesss_point.setter
    def accesss_point(self, accesss_point):
        """Sets the accesss_point of this AbstractCloudSpaceRequest.


        :param accesss_point: The accesss_point of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                accesss_point is not None and len(accesss_point) > 18):
            raise ValueError("Invalid value for `accesss_point`, length must be less than or equal to `18`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                accesss_point is not None and len(accesss_point) < 7):
            raise ValueError("Invalid value for `accesss_point`, length must be greater than or equal to `7`")  # noqa: E501

        self._accesss_point = accesss_point

    @property
    def cidr(self):
        """Gets the cidr of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The cidr of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this AbstractCloudSpaceRequest.


        :param cidr: The cidr of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cidr is None:  # noqa: E501
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cidr is not None and len(cidr) > 16):
            raise ValueError("Invalid value for `cidr`, length must be less than or equal to `16`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cidr is not None and len(cidr) < 10):
            raise ValueError("Invalid value for `cidr`, length must be greater than or equal to `10`")  # noqa: E501

        self._cidr = cidr

    @property
    def maximum_num_cpus(self):
        """Gets the maximum_num_cpus of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The maximum_num_cpus of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: int
        """
        return self._maximum_num_cpus

    @maximum_num_cpus.setter
    def maximum_num_cpus(self, maximum_num_cpus):
        """Sets the maximum_num_cpus of this AbstractCloudSpaceRequest.


        :param maximum_num_cpus: The maximum_num_cpus of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: int
        """

        self._maximum_num_cpus = maximum_num_cpus

    @property
    def maximum_num_gpus(self):
        """Gets the maximum_num_gpus of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The maximum_num_gpus of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: int
        """
        return self._maximum_num_gpus

    @maximum_num_gpus.setter
    def maximum_num_gpus(self, maximum_num_gpus):
        """Sets the maximum_num_gpus of this AbstractCloudSpaceRequest.


        :param maximum_num_gpus: The maximum_num_gpus of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: int
        """

        self._maximum_num_gpus = maximum_num_gpus

    @property
    def maximum_ram_in_megabytes(self):
        """Gets the maximum_ram_in_megabytes of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The maximum_ram_in_megabytes of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: int
        """
        return self._maximum_ram_in_megabytes

    @maximum_ram_in_megabytes.setter
    def maximum_ram_in_megabytes(self, maximum_ram_in_megabytes):
        """Sets the maximum_ram_in_megabytes of this AbstractCloudSpaceRequest.


        :param maximum_ram_in_megabytes: The maximum_ram_in_megabytes of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: int
        """

        self._maximum_ram_in_megabytes = maximum_ram_in_megabytes

    @property
    def maximum_storage_in_megabytes(self):
        """Gets the maximum_storage_in_megabytes of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The maximum_storage_in_megabytes of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: int
        """
        return self._maximum_storage_in_megabytes

    @maximum_storage_in_megabytes.setter
    def maximum_storage_in_megabytes(self, maximum_storage_in_megabytes):
        """Sets the maximum_storage_in_megabytes of this AbstractCloudSpaceRequest.


        :param maximum_storage_in_megabytes: The maximum_storage_in_megabytes of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: int
        """

        self._maximum_storage_in_megabytes = maximum_storage_in_megabytes

    @property
    def num_availability_zones(self):
        """Gets the num_availability_zones of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The num_availability_zones of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: int
        """
        return self._num_availability_zones

    @num_availability_zones.setter
    def num_availability_zones(self, num_availability_zones):
        """Sets the num_availability_zones of this AbstractCloudSpaceRequest.


        :param num_availability_zones: The num_availability_zones of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: int
        """

        self._num_availability_zones = num_availability_zones

    @property
    def power_on_minimum_delay(self):
        """Gets the power_on_minimum_delay of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The power_on_minimum_delay of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: int
        """
        return self._power_on_minimum_delay

    @power_on_minimum_delay.setter
    def power_on_minimum_delay(self, power_on_minimum_delay):
        """Sets the power_on_minimum_delay of this AbstractCloudSpaceRequest.


        :param power_on_minimum_delay: The power_on_minimum_delay of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                power_on_minimum_delay is not None and power_on_minimum_delay < 0):  # noqa: E501
            raise ValueError("Invalid value for `power_on_minimum_delay`, must be a value greater than or equal to `0`")  # noqa: E501

        self._power_on_minimum_delay = power_on_minimum_delay

    @property
    def subtype(self):
        """Gets the subtype of this AbstractCloudSpaceRequest.  # noqa: E501


        :return: The subtype of this AbstractCloudSpaceRequest.  # noqa: E501
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this AbstractCloudSpaceRequest.


        :param subtype: The subtype of this AbstractCloudSpaceRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and subtype is None:  # noqa: E501
            raise ValueError("Invalid value for `subtype`, must not be `None`")  # noqa: E501

        self._subtype = subtype

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractCloudSpaceRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbstractCloudSpaceRequest):
            return True

        return self.to_dict() != other.to_dict()
